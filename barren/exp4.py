import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1.inset_locator import inset_axes, mark_inset
import scienceplots
from matplotlib.patches import Rectangle

# 假设original_data和modified_data是两个包含数据的列表，以及layers等属性已定义
# ...
plt.style.use(['science', 'no-latex'])
qubits = [2, 4, 6, 8, 10, 12, 14, 16, 18]
layers = [5, 10, 20, 50, 100, 150, 200, 250, 300, 400, 500]
line_width: int = 3
font_size: int = 30
legend_size: int = 25
label_size: int = 30
original_data = [[0.0921305130601163, 0.1201095864248526, 0.10462086550506777, 0.07782599968534858, 0.07092286599119652, 0.09038234773252395, 0.06189990018468901, 0.07943113762726718, 0.10313034541435234, 0.09894776374428049, 0.08395008463629942], [0.07150929845574121, 0.03249049700665185, 0.01759060071405434, 0.019530007986277576, 0.02488166172503422, 0.02307562430900119, 0.026258670184189987, 0.022390288958042178, 0.021859254569683628, 0.019937726547538517, 0.016549632449640164], [0.05267133463986978, 0.03808526033060597, 0.01850806435390122, 0.005120912390921583, 0.005659713938448837, 0.005518203052428133, 0.00586881227705096, 0.004274985821350007, 0.004076611320528497, 0.006164786645825964, 0.003433085037522245], [0.053357797246422374, 0.03509168233101714, 0.02369399937834707, 0.0025586744798863654, 0.0010908260219356985, 0.001088018609598879, 0.0014505394178455147, 0.001774387360818543, 0.0011913128889283508, 0.0011930995221935184, 0.0009220324266548008], [0.06432002569530929, 0.038267583895063226, 0.023571430981000327, 0.0019312506818683626, 0.0004475972909535001, 0.0003164389218343304, 0.0002816716925954457, 0.00027550417039702747, 0.00028762422493436307, 0.00034212172847429735, 0.0002738463231626068], [0.053266024201347024, 0.04555892545584994, 0.01768799999971872, 0.002908352971716387, 0.00014499783430791082, 9.925014653705743e-05, 7.717265788882421e-05, 8.756729957823585e-05, 7.526326683355459e-05, 0.00010214317187988352, 8.612432503727374e-05], [0.05600855665471349, 0.05455981354783777, 0.017327845920192254, 0.0023346610387647766, 0.0001366644131133145, 2.6985896154716993e-05, 2.2137134213514568e-05, 1.849141622244648e-05, 2.186063810365585e-05, 2.826893321887267e-05, 1.565187610517698e-05], [0.05482981156746218, 0.04637441257979377, 0.021271391709068534, 0.001431050038628469, 6.91629757608511e-05, 7.235465261001103e-06, 5.111477069047928e-06, 4.1746964728911125e-06, 4.8551479399861325e-06, 4.301962864671711e-06, 4.667365835277301e-06], [0.0606673705008715, 0.033079111355495974, 0.017994114329758573, 0.002071393806930489, 8.5116137177719e-05, 7.431909439212301e-06, 1.8918546829881035e-06, 1.2644654868030701e-06, 1.4318234022131306e-06, 1.5815240554847327e-06, 1.185652983966273e-06]]
modified_data = [[0.012956754096441947, 0.009254436554730875, 0.011809345762642814, 0.012035095470163017, 0.01288463405136459, 0.014500470816247337, 0.01226726242103122, 0.010640468571908899, 0.008829699968869701, 0.01466923670226916, 0.010426533408447892], [0.009114514059847449, 0.009795037381411414, 0.008854300235594253, 0.008420958034989733, 0.006551950569510405, 0.008415796285745769, 0.006896400168636174, 0.006526883861986869, 0.009482150428030505, 0.0073648237529185655, 0.005870460839684479], [0.009483885316358905, 0.009470718422597744, 0.00865598791302703, 0.008306222121748504, 0.00628010312508339, 0.008951126693580865, 0.007114191123105031, 0.007230386198815393, 0.008094559194177174, 0.010113350285563972, 0.0056252212647749], [0.008355442120857199, 0.009432283371566739, 0.008775487431363865, 0.0046704861319354285, 0.009615730021411617, 0.005442804109855986, 0.008022570570555596, 0.007993965277863476, 0.009031168689989287, 0.005400931845998298, 0.008353873989751574], [0.004606964965166829, 0.010417157801239465, 0.008087315636347769, 0.00906241032386823, 0.012828450658221649, 0.0060232315508780086, 0.00915499258165792, 0.008843870145184014, 0.009126447611699957, 0.007043957943433988, 0.007931813101946236], [0.009833966637548928, 0.00970333009360362, 0.009339249876669573, 0.005873849887784799, 0.008734212436222074, 0.005942419066332642, 0.008305317922104934, 0.0060785066677510715, 0.0061652604561474545, 0.0066103142835516335, 0.00671281779790487], [0.009975647394179065, 0.011553911861340842, 0.0079553753069193, 0.007460788239981674, 0.007441194107323881, 0.009777207175697107, 0.006325100086584013, 0.006463004015732296, 0.0085471213120022, 0.007867817305507589, 0.007374107347340474], [0.004891815827273291, 0.011090780707053058, 0.009691296100508767, 0.009049248273368754, 0.00520409342436794, 0.007394645676011568, 0.008973445528185521, 0.006702262554426281, 0.007950033261733484, 0.007730431802872767, 0.006676561024237382], [0.006752574743444711, 0.01275109725592813, 0.008723154781364907, 0.0075977126837717315, 0.008477235764856556, 0.00743661075496124, 0.005370379659871337, 0.007971226628947716, 0.0072553194529525545, 0.007981173512283501, 0.00782023180529803]]


fig, ax = plt.subplots(figsize=(16, 9))
for index, qubit in enumerate(qubits):
    if index == 0:
        ax.plot(layers, original_data[index], marker='*', label='Original Method', linewidth=line_width, color='green')
    else:
        ax.plot(layers, original_data[index], marker='*', linewidth=line_width, color='green', alpha=0.91-0.07*index)

for index, qubit in enumerate(qubits):
    if index == 0:
        ax.plot(layers, modified_data[index], marker='o', label='Modified Method', linewidth=line_width, color='red')
    else:
        ax.plot(layers, modified_data[index], marker='o', linewidth=line_width, color='red', alpha=0.91-0.07*index)

ax.set_xlabel(r"Layers", fontsize=font_size, fontweight='bold')
ax.set_ylabel(r"$\langle \partial \theta_{1, 1} E\rangle$ variance", fontsize=font_size, fontweight='bold')
ax.legend(fontsize=legend_size, loc='lower right')
ax.set_yscale('log')
ax.set_xticks([])
ax.set_yticks([])
ax.tick_params(axis='both', labelsize=label_size, width=3)

# 创建放大区域的插图
# 注意：这里的1.5, 2.5, 0.1, 0.2是示例值，需要你根据自己的数据进行调整
x1, x2, y1, y2 = 3, 75, 0.001, 0.2
rect = Rectangle((x1, y1), x2-x1, y2-y1, linewidth=1, edgecolor='black', fill=False)
ax.add_patch(rect)
ax.plot([x1, 22], [y1, 3.48e-5], 'k--')
ax.plot([x2, 185], [y1, 3.68e-5], 'k--')

axins = inset_axes(ax, width="30%", height="40%", loc='upper left',  bbox_to_anchor=(0.08, -0.52, 1, 1), bbox_transform=ax.transAxes, borderpad=0)
axins.set_xlim(x1, x2)
axins.set_ylim(y1, y2)
axins.set_xscale('linear')
axins.set_yscale('log')
ax.set_ylim(0.00000001, 0.25)
mark_inset(ax, axins, loc1=2, loc2=4, fc=(0.0, 0.0, 0.0, 0.2))

# 在插图上绘制相同的数据
for index, qubit in enumerate(qubits):
    axins.plot(layers, original_data[index], marker='*', linewidth=line_width, color='green', alpha=0.91-0.07*index)
    axins.plot(layers, modified_data[index], marker='o', linewidth=line_width, color='red', alpha=0.91-0.07*index)
axins.tick_params(axis='both', labelsize=label_size, width=4)
# plt.savefig('Experiment_2_1.png', dpi=300)
plt.show()
